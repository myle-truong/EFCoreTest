// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Entities;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(EFCoreTestContext))]
    [Migration("20230418110125_first_migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LandTaal", b =>
                {
                    b.Property<string>("LandenLandCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TalenTaalCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LandenLandCode", "TalenTaalCode");

                    b.HasIndex("TalenTaalCode");

                    b.ToTable("LandTaal");
                });

            modelBuilder.Entity("Model.Entities.Land", b =>
                {
                    b.Property<string>("LandCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LandCode");

                    b.ToTable("Landen");
                });

            modelBuilder.Entity("Model.Entities.Stad", b =>
                {
                    b.Property<int>("StadNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadNr"));

                    b.Property<string>("LandCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StadNr");

                    b.HasIndex("LandCode");

                    b.ToTable("Steden");
                });

            modelBuilder.Entity("Model.Entities.Taal", b =>
                {
                    b.Property<string>("TaalCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaalCode");

                    b.ToTable("Talen");
                });

            modelBuilder.Entity("LandTaal", b =>
                {
                    b.HasOne("Model.Entities.Land", null)
                        .WithMany()
                        .HasForeignKey("LandenLandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Taal", null)
                        .WithMany()
                        .HasForeignKey("TalenTaalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Stad", b =>
                {
                    b.HasOne("Model.Entities.Land", "Land")
                        .WithMany("Steden")
                        .HasForeignKey("LandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");
                });

            modelBuilder.Entity("Model.Entities.Land", b =>
                {
                    b.Navigation("Steden");
                });
#pragma warning restore 612, 618
        }
    }
}
