// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Entities;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(EFCoreTestContext))]
    [Migration("20230418112552_seedingDesign")]
    partial class seedingDesign
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LandTaal", b =>
                {
                    b.Property<string>("LandenLandCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TalenTaalCode")
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("LandenLandCode", "TalenTaalCode");

                    b.HasIndex("TalenTaalCode");

                    b.ToTable("LandTaal");

                    b.HasData(
                        new
                        {
                            LandenLandCode = "BEL",
                            TalenTaalCode = "de"
                        },
                        new
                        {
                            LandenLandCode = "BEL",
                            TalenTaalCode = "fr"
                        },
                        new
                        {
                            LandenLandCode = "BEL",
                            TalenTaalCode = "nl"
                        },
                        new
                        {
                            LandenLandCode = "DEU",
                            TalenTaalCode = "de"
                        },
                        new
                        {
                            LandenLandCode = "FRA",
                            TalenTaalCode = "fr"
                        },
                        new
                        {
                            LandenLandCode = "LUX",
                            TalenTaalCode = "de"
                        },
                        new
                        {
                            LandenLandCode = "LUX",
                            TalenTaalCode = "fr"
                        },
                        new
                        {
                            LandenLandCode = "LUX",
                            TalenTaalCode = "lb"
                        },
                        new
                        {
                            LandenLandCode = "NLD",
                            TalenTaalCode = "nl"
                        });
                });

            modelBuilder.Entity("Model.Entities.Land", b =>
                {
                    b.Property<string>("LandCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LandCode");

                    b.HasIndex("LandCode")
                        .IsUnique();

                    b.ToTable("Landen", (string)null);

                    b.HasData(
                        new
                        {
                            LandCode = "BEL",
                            Naam = "België"
                        },
                        new
                        {
                            LandCode = "DEU",
                            Naam = "Duitsland"
                        },
                        new
                        {
                            LandCode = "FRA",
                            Naam = "Frankrijk"
                        },
                        new
                        {
                            LandCode = "LUX",
                            Naam = "Luxemburg"
                        },
                        new
                        {
                            LandCode = "NLD",
                            Naam = "Nederland"
                        });
                });

            modelBuilder.Entity("Model.Entities.Stad", b =>
                {
                    b.Property<int>("StadNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StadNr"));

                    b.Property<string>("LandCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StadNr");

                    b.HasIndex("LandCode");

                    b.ToTable("Steden", (string)null);

                    b.HasData(
                        new
                        {
                            StadNr = 1,
                            LandCode = "BEL",
                            Naam = "Brussel"
                        },
                        new
                        {
                            StadNr = 2,
                            LandCode = "BEL",
                            Naam = "Antwerpen"
                        },
                        new
                        {
                            StadNr = 3,
                            LandCode = "BEL",
                            Naam = "Luik"
                        },
                        new
                        {
                            StadNr = 4,
                            LandCode = "NLD",
                            Naam = "Amsterdam"
                        },
                        new
                        {
                            StadNr = 5,
                            LandCode = "NLD",
                            Naam = "Den Haag"
                        },
                        new
                        {
                            StadNr = 6,
                            LandCode = "NLD",
                            Naam = "Rotterdam"
                        },
                        new
                        {
                            StadNr = 7,
                            LandCode = "DEU",
                            Naam = "Berlijn"
                        },
                        new
                        {
                            StadNr = 8,
                            LandCode = "DEU",
                            Naam = "Hamburg"
                        },
                        new
                        {
                            StadNr = 9,
                            LandCode = "DEU",
                            Naam = "München"
                        },
                        new
                        {
                            StadNr = 10,
                            LandCode = "LUX",
                            Naam = "Luxemburg"
                        },
                        new
                        {
                            StadNr = 11,
                            LandCode = "FRA",
                            Naam = "Parijs"
                        },
                        new
                        {
                            StadNr = 12,
                            LandCode = "FRA",
                            Naam = "Marseille"
                        },
                        new
                        {
                            StadNr = 13,
                            LandCode = "FRA",
                            Naam = "Lyon"
                        });
                });

            modelBuilder.Entity("Model.Entities.Taal", b =>
                {
                    b.Property<string>("TaalCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TaalCode");

                    b.ToTable("Talen", (string)null);

                    b.HasData(
                        new
                        {
                            TaalCode = "de",
                            Naam = "Duits"
                        },
                        new
                        {
                            TaalCode = "fr",
                            Naam = "Frans"
                        },
                        new
                        {
                            TaalCode = "lb",
                            Naam = "Luxemburgs"
                        },
                        new
                        {
                            TaalCode = "nl",
                            Naam = "Nederlands"
                        });
                });

            modelBuilder.Entity("LandTaal", b =>
                {
                    b.HasOne("Model.Entities.Land", null)
                        .WithMany()
                        .HasForeignKey("LandenLandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Taal", null)
                        .WithMany()
                        .HasForeignKey("TalenTaalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Stad", b =>
                {
                    b.HasOne("Model.Entities.Land", "Land")
                        .WithMany("Steden")
                        .HasForeignKey("LandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");
                });

            modelBuilder.Entity("Model.Entities.Land", b =>
                {
                    b.Navigation("Steden");
                });
#pragma warning restore 612, 618
        }
    }
}
